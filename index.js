// Generated by CoffeeScript 1.9.0
(function() {
  var Promise, asyncArrayReturn, base, defineMemoizedPerInstanceProperty, promisify, promisifyArray, prop, proxyAll, proxyBuilder, thenify, __doc__, _i, _j, _len, _len1, _ref, _ref1,
    __slice = [].slice;

  __doc__ = "If you use this library then if you put `.promise` after a Node-style async\nfunction, it will turn it into a function that returns a Promise instead of\ntaking a callback.\n\nThe original function is available as a property on the Promise generating\nfunction (`.___instapromiseOriginalFunction___`).\n\n```\n  promisify = require 'instapromise'\n  p = fs.readFile.promise \"/tmp/hello\", 'utf8'\n  p.then(console.log)\n```\n\nIf you want to promisify methods, use `.promise` after the object and before\nthe method name.\n\n```\n  promisify = require 'instapromise'\n  p = fs.promise.readFile \"/tmp/hello\", 'utf8'\n  p.then(console.log)\n```\n\nThis code is based on the proxying code used in fibrous.\nhttps://github.com/goodeggs/fibrous/blob/master/src/fibrous.coffee\n";

  Promise = require('native-or-bluebird');

  thenify = require('./thenify');

  asyncArrayReturn = function(nodeStyleAsyncFunction) {
    "Transforms a Node-style async function that has multiple passed values\n(ex. (err, result, result2, result3)) into one that only has err and then\nan Array of those values (ex. (err, [result, result2, result3])) to\nconform to the (err, result) convention";
    return function() {
      var args, callback, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
      args.push(function() {
        var cbArgs, err;
        err = arguments[0], cbArgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return typeof callback === "function" ? callback(err, cbArgs) : void 0;
      });
      return nodeStyleAsyncFunction.apply(this, args);
    };
  };

  promisify = function(nodeStyleAsyncFunction) {
    "Converts a Node-style async function that takes a callback into one that\nreturns a Promise instead and doesn't need a callback";
    var f;
    f = thenify(nodeStyleAsyncFunction);
    f.___instapromiseOriginalFunction___ = nodeStyleAsyncFunction;
    return f;
  };

  promisifyArray = function(nodeStyleAsyncFunction) {
    "Converts a Node-style async function that takes a callback that it will\ncall with more than just a single `result` parameter, into a function that\nreturns a Promise that will resolve with a single value that is an Array\nthat contains all the non-`err` parameters (`result`s) that would be passed\nto the original function's callback.\n\nEx. This is useful for use with mikeal's `request` npm module, since\n`request.get` calls its callback with `(err, response, body)` and sometimes\nyou want acccess to the body.\n";
    var f;
    f = promisify(asyncArrayReturn(nodeStyleAsyncFunction));
    f.___instapromiseOriginalFunction___ = nodeStyleAsyncFunction;
    return f;
  };

  proxyAll = function(src, target, proxyFn) {
    var key, _fn, _i, _len, _ref;
    _ref = Object.keys(src);
    _fn = function(key) {
      if (Object.prototype[key] != null) {
        return;
      }
      if (Object.getOwnPropertyDescriptor(src, key).get != null) {
        return;
      }
      if (typeof src[key] !== 'function') {
        return;
      }
      target[key] = proxyFn(key);
      return target[key].___instapromiseOriginalFunction___ = src[key];
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      _fn(key);
    }
    return target;
  };

  proxyBuilder = function(prop) {
    return function(that) {
      var func, result;
      result = typeof that === 'function' ? (func = (function() {
        switch (prop) {
          case 'promise':
            return promisify(that);
          case 'promiseArray':
            return promisifyArray(that);
          default:
            throw new Error("Unknown proxy property `" + prop + "`");
        }
      })(), Object.getPrototypeOf(that) !== Function.prototype ? func.__proto__ = Object.getPrototypeOf(that)[prop] : void 0, func.___instapromiseOriginalFunction___ = that, func) : Object.create(Object.getPrototypeOf(that) && Object.getPrototypeOf(that)[prop] || Object.prototype);
      result.that = that;
      return proxyAll(that, result, function(key) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.that[key][prop].apply(this.that, args);
        };
      });
    };
  };

  defineMemoizedPerInstanceProperty = function(target, propertyName, factory) {
    var cacheKey;
    cacheKey = "$$___instapromise_" + propertyName + "___$$";
    return Object.defineProperty(target, propertyName, {
      enumerable: false,
      configurable: true,
      set: function(value) {
        delete this[cacheKey];
        return Object.defineProperty(this, propertyName, {
          value: value,
          writable: true,
          configurable: true,
          enumerable: true
        });
      },
      get: function() {
        if (!(Object.prototype.hasOwnProperty.call(this, cacheKey) && this[cacheKey])) {
          Object.defineProperty(this, cacheKey, {
            value: factory(this),
            writable: true,
            configurable: true,
            enumerable: false
          });
        }
        return this[cacheKey];
      }
    });
  };

  _ref = [Object.prototype, Function.prototype];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    base = _ref[_i];
    _ref1 = ['promise', 'promiseArray'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      prop = _ref1[_j];
      if (base[prop] == null) {
        defineMemoizedPerInstanceProperty(base, prop, proxyBuilder(prop));
      }
    }
  }

  module.exports = {
    __doc__: __doc__,
    Promise: Promise,
    promisify: promisify,
    promisifyArray: promisifyArray
  };

}).call(this);
